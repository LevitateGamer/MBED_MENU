/*
    The code in this file uses open source libraries provided by thecoderscorner

    DO NOT EDIT THIS FILE, IT WILL BE GENERATED EVERY TIME YOU USE THE UI DESIGNER
    INSTEAD EITHER PUT CODE IN YOUR SKETCH OR CREATE ANOTHER SOURCE FILE.

    All the variables you may need access to are marked extern in this file for easy
    use elsewhere.
 */

#include <tcMenu.h>
#include "Arduino_menu.h"

// Global variable declarations
const  ConnectorLocalInfo applicationInfo = { "Home Auto", "dafe20fb-ab47-4418-916b-2f534079d2b0" };
TcMenuRemoteServer remoteServer(applicationInfo);

LiquidCrystal lcd(PB5, PC7, PB3, PA4, PB4, PF4);
LiquidCrystalRenderer renderer(lcd, 16, 2);
MBedAnalogDevice analogDevice;
MbedEthernetInitialiser mbedEthInitialisation(3333);
MBedEthernetTransport ethernetTransport;
TagValueRemoteServerConnection ethernetConnection(ethernetTransport, mbedEthInitialisation);

// Global Menu Item declarations
const char enumStrDoorsGates_0[] = "Choose";
const char enumStrDoorsGates_1[] = "Shop Door Left";
const char enumStrDoorsGates_2[] = "Shop Door Right";
const char enumStrDoorsGates_3[] = "Gate";
const char* const enumStrDoorsGates[]  = { enumStrDoorsGates_0, enumStrDoorsGates_1, enumStrDoorsGates_2, enumStrDoorsGates_3 };
const EnumMenuInfo minfoDoorsGates = { "DoorsGates", 3, 6, 3, Open_Door_or_Gate, enumStrDoorsGates };
EnumMenuItem menuDoorsGates(&minfoDoorsGates, 0, NULL);
RENDERING_CALLBACK_NAME_INVOKE(fnMainRtCall, backSubItemRenderFn, "Main", -1, NO_CALLBACK)
const SubMenuInfo minfoMain = { "Main", 1, 0xffff, 0, NO_CALLBACK };
BackMenuItem menuBackMain(fnMainRtCall, &menuDoorsGates);
SubMenuItem menuMain(&minfoMain, &menuBackMain, NULL);

void setupMenu() {
    // First we set up eeprom and authentication (if needed).

    // Code generated by plugins.
    lcd.setIoAbstraction(internalDigitalIo());
    lcd.begin(16, 2);
    renderer.setUpdatesPerSecond(2);
    switches.init(internalDigitalIo(), SWITCHES_POLL_EVERYTHING, true);
    switches.addSwitch(PF2, NULL);
    switches.onRelease(PF2, [](pinid_t /*key*/, bool held) {
            menuMgr.onMenuSelect(held);
        });
    setupAnalogJoystickEncoder(&analogDevice, PA3, [](int val) {
            menuMgr.valueChanged(val);
        });
    menuMgr.initWithoutInput(&renderer, &menuMain);
    remoteServer.addConnection(&ethernetConnection);
}

